#!/usr/bin/python

import os, argparse, subprocess
import re

# parse arguments
parser = argparse.ArgumentParser()
parser.add_argument("fasm", metavar="input.s", help="the MIPS assembly file (ASCII)")
args = parser.parse_args()

fasm = args.fasm
fhex = fasm + ".out"
fout_name = re.sub('\.s.out$', '.x', fhex)

# run SPIM (the actual MIPS assembler)
SPIM = "./spim"
cmd = [SPIM, "-noexception", "-assemble", "-file", fasm]
subprocess.call(cmd)

# Rename the SPIM output file to have a more descriptice name
cmd = ["mv", fhex, re.sub('\.s.out$', '.text.dat', fhex)]
subprocess.call(cmd)

opt = open(re.sub('\.s.out$', '.text.dat', fhex), 'r')
lines = opt.readlines()[1:]
opt.close()
sep = lambda x: x.split(" ")
lines = list(map(sep, lines))
def flatten(l):
    return [re.sub('\n', '', item) for sublist in l for item in sublist if len(re.sub('\n', '', item))>0]
lines = flatten(lines)

lines = [int('0x' + hex, base=16) for hex in lines]

def swap(b, a_start, a_size, b_start, b_size):
    a_end = a_start + a_size
    b_end = b_start + b_size

    before_a = b[0: a_start]
    block_a = b[a_start:a_end]
    til_b = b[a_end: b_start]
    block_b = b[b_start:b_end]
    return b[0: a_start] + block_a + b[a_end: b_start] + block_b + b[b_end:]

SPECIAL = 0
JUMP = 2
JAL = 3
REGIMM = 1
res = []
for line in lines:
    bin_value = f'{line:0>32b}'
    # instr = int(bin_value[:6], 2)
    # if instr==REGIMM or instr==SPECIAL or instr==JUMP or instr==JAL:
    res.append(hex(int(bin_value, 2)))
        # continue
    # bin_value = swap(bin_value, 6, 5, 11, 5)
    # res.append(hex(int(bin_value, 2)))

fout = open(fout_name, "w")
for hex in res:
    fout.write(f"{hex} ")
fout.close()

# remove all other files

#cmd = ["rm", fhex + ".*.dat"]
#cmd = str.join(' ', cmd)
#subprocess.call(cmd, shell=True)  # we need a shell to expand the wildcard
